"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidPublicKey = exports.getHkdf = exports.verifySignedPayload = exports.getHandshakePayload = exports.decodePayload = exports.getPeerIdFromPayload = exports.signPayload = exports.createHandshakePayload = exports.getPayload = exports.generateKeypair = void 0;
const hkdf_1 = __importDefault(require("bcrypto/lib/hkdf"));
const x25519_1 = __importDefault(require("bcrypto/lib/js/x25519"));
const sha256_1 = __importDefault(require("bcrypto/lib/js/sha256"));
const buffer_1 = require("buffer");
const peer_id_1 = __importDefault(require("peer-id"));
const libp2p_crypto_1 = require("libp2p-crypto");
const payload_1 = require("./proto/payload");
const equals_1 = __importDefault(require("uint8arrays/equals"));
const NoiseHandshakePayloadProto = payload_1.pb.NoiseHandshakePayload;
function generateKeypair() {
    const privateKey = x25519_1.default.privateKeyGenerate();
    const publicKey = x25519_1.default.publicKeyCreate(privateKey);
    return {
        publicKey,
        privateKey
    };
}
exports.generateKeypair = generateKeypair;
async function getPayload(localPeer, staticPublicKey, earlyData) {
    const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));
    const earlyDataPayload = earlyData || buffer_1.Buffer.alloc(0);
    return await createHandshakePayload(localPeer.marshalPubKey(), signedPayload, earlyDataPayload);
}
exports.getPayload = getPayload;
function createHandshakePayload(libp2pPublicKey, signedPayload, earlyData) {
    const payloadInit = NoiseHandshakePayloadProto.create({
        identityKey: buffer_1.Buffer.from(libp2pPublicKey),
        identitySig: signedPayload,
        data: earlyData || null
    });
    return buffer_1.Buffer.from(NoiseHandshakePayloadProto.encode(payloadInit).finish());
}
exports.createHandshakePayload = createHandshakePayload;
async function signPayload(peerId, payload) {
    return buffer_1.Buffer.from(await peerId.privKey.sign(payload));
}
exports.signPayload = signPayload;
async function getPeerIdFromPayload(payload) {
    return await peer_id_1.default.createFromPubKey(buffer_1.Buffer.from(payload.identityKey));
}
exports.getPeerIdFromPayload = getPeerIdFromPayload;
function decodePayload(payload) {
    return NoiseHandshakePayloadProto.toObject(NoiseHandshakePayloadProto.decode(buffer_1.Buffer.from(payload)));
}
exports.decodePayload = decodePayload;
function getHandshakePayload(publicKey) {
    return buffer_1.Buffer.concat([buffer_1.Buffer.from('noise-libp2p-static-key:'), publicKey]);
}
exports.getHandshakePayload = getHandshakePayload;
async function isValidPeerId(peerId, publicKeyProtobuf) {
    const generatedPeerId = await peer_id_1.default.createFromPubKey(publicKeyProtobuf);
    return equals_1.default(generatedPeerId.id, peerId);
}
/**
 * Verifies signed payload, throws on any irregularities.
 * @param {bytes} noiseStaticKey - owner's noise static key
 * @param {bytes} payload - decoded payload
 * @param {PeerId} remotePeer - owner's libp2p peer ID
 * @returns {Promise<PeerId>} - peer ID of payload owner
 */
async function verifySignedPayload(noiseStaticKey, payload, remotePeer) {
    const identityKey = buffer_1.Buffer.from(payload.identityKey);
    if (!(await isValidPeerId(remotePeer.id, identityKey))) {
        throw new Error("Peer ID doesn't match libp2p public key.");
    }
    const generatedPayload = getHandshakePayload(noiseStaticKey);
    // Unmarshaling from PublicKey protobuf
    const publicKey = libp2p_crypto_1.keys.unmarshalPublicKey(identityKey);
    if (!payload.identitySig || !publicKey.verify(generatedPayload, buffer_1.Buffer.from(payload.identitySig))) {
        throw new Error("Static key doesn't match to peer that signed payload!");
    }
    return peer_id_1.default.createFromPubKey(identityKey);
}
exports.verifySignedPayload = verifySignedPayload;
function getHkdf(ck, ikm) {
    const info = buffer_1.Buffer.alloc(0);
    const prk = hkdf_1.default.extract(sha256_1.default, ikm, ck);
    const okm = hkdf_1.default.expand(sha256_1.default, prk, info, 96);
    const k1 = okm.slice(0, 32);
    const k2 = okm.slice(32, 64);
    const k3 = okm.slice(64, 96);
    return [k1, k2, k3];
}
exports.getHkdf = getHkdf;
function isValidPublicKey(pk) {
    return x25519_1.default.publicKeyVerify(pk.slice(0, 32));
}
exports.isValidPublicKey = isValidPublicKey;
//# sourceMappingURL=utils.js.map