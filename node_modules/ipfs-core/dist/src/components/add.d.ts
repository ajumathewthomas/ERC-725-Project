declare function _exports({ addAll }: {
    addAll: any;
}): (source: Source, options?: (AddOptions & import("../utils").AbortOptions) | undefined) => Promise<import("./add-all").UnixFSEntry>;
export = _exports;
export type AddOptions = {
    /**
     * - chunking algorithm used to build ipfs DAGs (default: `'size-262144'`)
     */
    chunker?: string | undefined;
    /**
     * - the CID version to use when storing the data (default: `0`)
     */
    cidVersion?: number | undefined;
    /**
     * - multihash hashing algorithm to use (default: `'sha2-256'`)
     */
    hashAlg?: string | undefined;
    /**
     * - If true, will not add blocks to the blockstore (default: `false`)
     */
    onlyHash?: boolean | undefined;
    /**
     * - pin this object when adding (default: `true`)
     */
    pin?: boolean | undefined;
    /**
     * - a function that will be called with the number of bytes added as a file is added to ipfs and the path of the file being added
     */
    progress?: ((bytes: number, path: string) => void) | undefined;
    /**
     * - if true, DAG leaves will contain raw file data and not be wrapped in a protobuf (default: `false`)
     */
    rawLeaves?: boolean | undefined;
    /**
     * - if true will use the [trickle DAG](https://godoc.org/github.com/ipsn/go-ipfs/gxlibs/github.com/ipfs/go-unixfs/importer/trickle) format for DAG generation (default: `false`)
     */
    trickle?: boolean | undefined;
    /**
     * - Adds a wrapping node around the content (default: `false`)
     */
    wrapWithDirectory?: boolean | undefined;
};
export type AddResult = Promise<import("./add-all").UnixFSEntry>;
export type Source = {
    path?: string | undefined;
    content?: string | String | AsyncIterable<Uint8Array> | Blob | ArrayBufferView | ArrayBuffer | Iterable<Uint8Array> | ReadableStream<Uint8Array> | undefined;
    mode?: string | number | undefined;
    mtime?: Date | [number, number] | import("ipfs-core-utils/src/files/format-mtime").MTime | undefined;
};
export type UnixFSEntry = {
    path: string;
    cid: import("cids");
    mode?: number | undefined;
    mtime?: import("../utils").MTime | undefined;
    size: number;
};
export type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=add.d.ts.map