declare function _exports({ pinManager, gcLock, dag }: {
    gcLock: import('..').GCLock;
    dag: import('..').DAG;
    pinManager: import('./pin-manager');
}): (source: import("ipfs-core-utils/src/pins/normalise-input").Source, options?: (AddSettings & import("../../utils").AbortOptions) | undefined) => AsyncIterable<import("cids")>;
export = _exports;
export type Source = string | String | import("cids") | import("ipfs-core-utils/src/pins/normalise-input").ToPinWithPath | Iterable<string | String | import("cids") | import("ipfs-core-utils/src/pins/normalise-input").ToPinWithPath> | AsyncIterable<string | String | import("cids") | import("ipfs-core-utils/src/pins/normalise-input").ToPinWithPath>;
export type PinTarget = {
    path: string | import("cids");
    recursive: boolean;
    metadata?: any;
};
export type AddOptions = AddSettings & import("../../utils").AbortOptions;
export type AddSettings = {
    lock?: boolean | undefined;
};
export type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
export type CID = import("cids");
export type AwaitIterable<T> = Iterable<T> | AsyncIterable<T>;
//# sourceMappingURL=add-all.d.ts.map