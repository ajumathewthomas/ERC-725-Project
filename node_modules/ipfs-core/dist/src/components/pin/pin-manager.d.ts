export = PinManager;
declare class PinManager {
    static checkPinType(type: any): void;
    constructor(repo: any, dag: any);
    repo: any;
    dag: any;
    log: debug.Debugger;
    directPins: Set<any>;
    recursivePins: Set<any>;
    _walkDag(cid: any, { preload }: {
        preload?: boolean | undefined;
    }): any;
    pinDirectly(cid: any, options?: {}): Promise<any>;
    unpin(cid: any): Promise<any>;
    pinRecursively(cid: any, options?: {}): Promise<void>;
    directKeys(): AsyncGenerator<{
        cid: import("cids");
        metadata: any;
    }, void, unknown>;
    recursiveKeys(): AsyncGenerator<{
        cid: import("cids");
        metadata: any;
    }, void, unknown>;
    /**
     * @param {Object} options
     * @param {boolean} [options.preload]
     */
    indirectKeys({ preload }: {
        preload?: boolean | undefined;
    }): AsyncGenerator<any, void, unknown>;
    isPinnedWithType(cid: any, types: any): Promise<{
        cid: any;
        pinned: boolean;
        reason: "direct" | "recursive";
        metadata: any;
        parent?: undefined;
    } | {
        cid: any;
        pinned: boolean;
        reason: "indirect";
        parent: any;
        metadata?: undefined;
    } | {
        cid: any;
        pinned: boolean;
        reason?: undefined;
        metadata?: undefined;
        parent?: undefined;
    }>;
    fetchCompleteDag(cid: any, options: any): Promise<void>;
}
declare namespace PinManager {
    export { PinTypes, PinType, PinQueryType };
}
declare namespace PinTypes {
    const direct: 'direct';
    const recursive: 'recursive';
    const indirect: 'indirect';
    const all: 'all';
}
type PinType = "direct" | "recursive" | "indirect";
type PinQueryType = "direct" | "recursive" | "indirect" | "all";
//# sourceMappingURL=pin-manager.d.ts.map