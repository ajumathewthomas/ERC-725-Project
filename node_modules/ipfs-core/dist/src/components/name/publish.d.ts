declare function _exports({ ipns, dag, peerId, isOnline, keychain }: {
    ipns: import('../../ipns');
    dag: import('../index').DAG;
    peerId: import('peer-id');
    isOnline: import('../index').IsOnline;
    keychain: import('../init').Keychain;
}): (value: string, options?: (PublishSettings & import("../../utils").AbortOptions) | undefined) => Promise<PublishResult>;
export = _exports;
/**
 * ipfs publish options.
 */
export type PublishOptions = PublishSettings & import("../../utils").AbortOptions;
export type PublishSettings = {
    /**
     * - Resolve given path before publishing.
     */
    resolve?: boolean | undefined;
    /**
     * - Time duration of the record.
     */
    lifetime?: string | undefined;
    /**
     * - Time duration this record should be cached.
     */
    ttl?: string | undefined;
    /**
     * - Name of the key to be used.
     */
    key?: string | undefined;
    /**
     * - When offline, save the IPNS record
     * to the the local datastore without broadcasting to the network instead of
     * simply failing.
     *
     * This option is not yet implemented in js-ipfs. See tracking issue [ipfs/js-ipfs#1997]
     * (https://github.com/ipfs/js-ipfs/issues/1997).
     */
    allowOffline?: boolean | undefined;
};
export type PublishResult = {
    name: string;
    value: string;
};
export type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=publish.d.ts.map