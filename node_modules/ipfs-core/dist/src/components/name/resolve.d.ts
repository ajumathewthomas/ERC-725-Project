declare function _exports({ dns, ipns, peerId, isOnline, options: constructorOptions }: {
    dns: import('../index').DNS;
    ipns: import('../../ipns');
    peerId: import('peer-id');
    isOnline: import('../index').IsOnline;
    options: {
        offline?: boolean;
    };
}): (name: string, options?: (ResolveSettings & import("../../utils").AbortOptions) | undefined) => AsyncIterable<string>;
export = _exports;
/**
 * IPFS resolve options.
 */
export type ResolveOptions = ResolveSettings & import("../../utils").AbortOptions;
/**
 * IPFS resolve options.
 */
export type ResolveSettings = {
    /**
     * - do not use cached entries.
     */
    nocache?: boolean | undefined;
    /**
     * - resolve until the result is not an IPNS name.
     */
    recursive?: boolean | undefined;
};
/**
 * IPFS resolve options.
 */
export type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=resolve.d.ts.map