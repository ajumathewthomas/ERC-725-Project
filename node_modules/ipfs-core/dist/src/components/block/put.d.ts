declare function _exports({ blockService, pin, gcLock, preload }: {
    blockService: import('..').IPFSBlockService;
    pin: import('..').Pin;
    gcLock: import('..').GCLock;
    preload: import('..').Preload;
}): (block: Uint8Array | import("ipld-block/src"), options?: (PutOptions & import("../../utils").AbortOptions) | undefined) => Promise<import("ipld-block/src")>;
export = _exports;
export type PutOptions = {
    /**
     * - A CID to store the block under (default: `undefined`)
     */
    cid?: import("cids") | undefined;
    /**
     * - The codec to use to create the CID (default: `'dag-pb'`)
     */
    format?: string | undefined;
    /**
     * - The hashing algorithm to use to create the CID (default: `'sha2-256'`)
     */
    mhtype?: string | undefined;
    mhlen?: number | undefined;
    /**
     * - The version to use to create the CID (default: `0`)
     */
    version?: 0 | 1 | undefined;
    /**
     * - If true, pin added blocks recursively (default: `false`)
     */
    pin?: boolean | undefined;
    preload?: boolean | undefined;
};
export type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
export type CID = import("cids");
export type IPLDBlock = import("ipld-block/src");
export type CIDVersion = 0 | 1;
//# sourceMappingURL=put.d.ts.map