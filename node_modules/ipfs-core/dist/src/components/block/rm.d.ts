declare function _exports({ blockService, gcLock, pinManager }: {
    blockService: import('..').IPFSBlockService;
    pinManager: import('../pin/pin-manager');
    gcLock: import('..').GCLock;
}): (cids: import("cids") | import("cids")[], options?: (RmOptions & import("../../utils").AbortOptions) | undefined) => AsyncIterable<RmSucceess | RmFailure>;
export = _exports;
export type RmOptions = {
    /**
     * - Ignores nonexistent blocks
     */
    force?: boolean | undefined;
    /**
     * - Write minimal output
     */
    quiet?: boolean | undefined;
};
export type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
/**
 * Note: If an error is present for a given object, the block with
 * that cid was not removed and the error will contain the reason why,
 * for example if the block was pinned.
 */
export type RmResult = RmSucceess | RmFailure;
export type RmSucceess = {
    cid: import("cids");
    error?: void | undefined;
};
export type RmFailure = {
    cid: import("cids");
    error: Error;
};
//# sourceMappingURL=rm.d.ts.map