declare function _exports(context: {
    ipld: import('..').IPLD;
}): (path: string, options?: (StatOptions & import("../../utils").AbortOptions) | undefined) => Promise<Stat>;
export = _exports;
export type StatOptions = {
    /**
     * - If true, return only the CID
     */
    hash?: boolean | undefined;
    /**
     * - If true, return only the size
     */
    size?: boolean | undefined;
    /**
     * - If true, compute the amount of the DAG that is local and if possible the total size
     */
    withLocal?: boolean | undefined;
};
export type Stat = {
    /**
     * - Content idenntifier
     */
    cid: CID;
    /**
     * - An integer with the file size in bytes.
     */
    size: number;
    /**
     * - An integer with the size of the
     * DAGNodes making up the file in bytes.
     */
    cumulativeSize: number;
    /**
     * - Type of the file which is  either directory
     * or file.
     */
    type: 'directory' | 'file';
    /**
     * - If type is directory, this is the number of files
     * in the directory. If it is file it is the number of blocks that make up the
     * file.
     */
    blocks: number;
    /**
     * - A boolean to indicate if locality
     * information is present.
     */
    withLocality?: boolean | undefined;
    /**
     * - Is a boolean to indicate if the queried dag is
     * fully present locally.
     */
    local?: boolean | undefined;
    /**
     * - An integer indicating the cumulative size of
     * the data present locally.
     */
    sizeLocal?: number | undefined;
    /**
     * - File mode
     */
    mode?: number | undefined;
    /**
     * - Modification time
     */
    mtime?: import("../../utils").MTime | undefined;
};
export type CID = import("cids");
export type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=stat.d.ts.map