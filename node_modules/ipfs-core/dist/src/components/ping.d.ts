declare function _exports({ libp2p }: {
    libp2p: import('libp2p');
}): (peerId: import("peer-id"), options?: (PingSettings & import("../utils").AbortOptions) | undefined) => AsyncIterable<Pong | PingFailure | StatusUpdate>;
export = _exports;
/**
 * Note that not all ping response objects are "pongs".
 * A "pong" message can be identified by a truthy success property and an empty
 * text property. Other ping responses are failures or status updates.
 */
export type Packet = Pong | PingFailure | StatusUpdate;
export type Pong = {
    success: true;
    time: number;
    text: '';
};
export type PingFailure = {
    success: false;
    time: number;
    text: string;
};
export type StatusUpdate = {
    success: true;
    time: 0;
    text: string;
};
export type PingOptions = PingSettings & import("../utils").AbortOptions;
export type PingSettings = {
    /**
     * - The number of ping messages to send
     */
    count?: number | undefined;
};
export type AbortOptions = {
    /**
     * - A timeout in ms
     */
    timeout?: number | undefined;
    /**
     * - Can be used to cancel any long running requests started as a result of this call
     */
    signal?: AbortSignal | undefined;
};
//# sourceMappingURL=ping.d.ts.map