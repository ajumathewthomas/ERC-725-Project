/// <reference types="node" />
export = multipart;
/**
 * @typedef {import('http').IncomingHttpHeaders} IncomingHttpHeaders
 */
/**
 * @template T
 * @typedef {AsyncIterable<T> & AsyncIterator<T>} It
 */
/**
 * Streaming multipart HTTP message parser
 * @param {import('http').IncomingMessage} source
 * @param {string} [boundary]
 * @returns {AsyncIterable<{headers:IncomingHttpHeaders, body:It<Buffer>}>}
 */
declare function multipart(source: import('http').IncomingMessage, boundary?: string | undefined): AsyncIterable<{
    headers: IncomingHttpHeaders;
    body: AsyncIterable<Buffer> & AsyncIterator<Buffer, any, undefined>;
}>;
declare namespace multipart {
    export { IncomingHttpHeaders, It, PrefixPush, PrefixStream, parseHeaders };
}
type IncomingHttpHeaders = import("http").IncomingHttpHeaders;
type It<T> = AsyncIterable<T> & AsyncIterator<T, any, undefined>;
type PrefixPush<T> = {
    push: (arg0: T) => void;
};
type PrefixStream<T> = AsyncIterable<T> & AsyncIterator<T, any, undefined> & PrefixPush<T>;
type parseHeaders = (arg0: string) => IncomingHttpHeaders;
//# sourceMappingURL=index.d.ts.map