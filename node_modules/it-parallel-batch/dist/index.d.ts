export = parallelBatch;
/**
 * @template T
 * @typedef {function():Promise<T>} Task
 */
/**
 * Takes an (async) iterator that emits promise-returning functions,
 * invokes them in parallel and emits the results as they become available but
 * in the same order as the input
 *
 * @template T
 * @param {AsyncIterable<Task<T>>} source
 * @param {number|string} [size=1]
 * @returns {AsyncIterable<T>}
 */
declare function parallelBatch<T>(source: AsyncIterable<() => Promise<T>>, size?: string | number | undefined): AsyncIterable<T>;
declare namespace parallelBatch {
    export { Task };
}
type Task<T> = () => Promise<T>;
//# sourceMappingURL=index.d.ts.map