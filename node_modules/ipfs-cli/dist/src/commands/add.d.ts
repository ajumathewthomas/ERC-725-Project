export const command: string;
export const describe: string;
export const builder: {
    progress: {
        alias: string;
        type: string;
        default: boolean;
        describe: string;
    };
    recursive: {
        alias: string;
        type: string;
        default: boolean;
    };
    trickle: {
        alias: string;
        type: string;
        default: boolean;
        describe: string;
    };
    'wrap-with-directory': {
        alias: string;
        type: string;
        default: boolean;
        describe: string;
    };
    'only-hash': {
        alias: string;
        type: string;
        default: boolean;
        describe: string;
    };
    'block-write-concurrency': {
        type: string;
        default: number;
        describe: string;
    };
    chunker: {
        default: string;
        describe: string;
    };
    'file-import-concurrency': {
        type: string;
        default: number;
        describe: string;
    };
    'enable-sharding-experiment': {
        type: string;
        default: boolean;
    };
    'shard-split-threshold': {
        type: string;
        default: number;
    };
    'raw-leaves': {
        type: string;
        describe: string;
    };
    'cid-version': {
        type: string;
        describe: string;
        default: number;
    };
    'cid-base': {
        describe: string;
        type: string;
        choices: string[];
    };
    hash: {
        type: string;
        choices: string[];
        describe: string;
        default: string;
    };
    quiet: {
        alias: string;
        type: string;
        default: boolean;
        describe: string;
    };
    quieter: {
        alias: string;
        type: string;
        default: boolean;
        describe: string;
    };
    silent: {
        type: string;
        default: boolean;
        describe: string;
    };
    pin: {
        type: string;
        default: boolean;
        describe: string;
    };
    preload: {
        type: string;
        default: boolean;
        describe: string;
    };
    hidden: {
        alias: string;
        type: string;
        default: boolean;
        describe: string;
    };
    'preserve-mode': {
        type: string;
        default: boolean;
        describe: string;
    };
    'preserve-mtime': {
        type: string;
        default: boolean;
        describe: string;
    };
    mode: {
        type: string;
        describe: string;
    };
    mtime: {
        type: string;
        coerce: (value: any) => any;
        describe: string;
    };
    'mtime-nsecs': {
        type: string;
        coerce: (value: any) => any;
        describe: string;
    };
    timeout: {
        type: string;
        coerce: typeof import("parse-duration").default;
    };
};
export function handler({ ctx: { ipfs, print, isDaemon, getStdin }, trickle, shardSplitThreshold, cidVersion, rawLeaves, onlyHash, hash, wrapWithDirectory, pin, chunker, preload, fileImportConcurrency, blockWriteConcurrency, timeout, quieter, quiet, silent, progress, file, mtime, mtimeNsecs, recursive, hidden, preserveMode, preserveMtime, mode, cidBase }: {
    ctx: {
        ipfs: any;
        print: any;
        isDaemon: any;
        getStdin: any;
    };
    trickle: any;
    shardSplitThreshold: any;
    cidVersion: any;
    rawLeaves: any;
    onlyHash: any;
    hash: any;
    wrapWithDirectory: any;
    pin: any;
    chunker: any;
    preload: any;
    fileImportConcurrency: any;
    blockWriteConcurrency: any;
    timeout: any;
    quieter: any;
    quiet: any;
    silent: any;
    progress: any;
    file: any;
    mtime: any;
    mtimeNsecs: any;
    recursive: any;
    hidden: any;
    preserveMode: any;
    preserveMtime: any;
    mode: any;
    cidBase: any;
}): Promise<void>;
export function handler({ ctx: { ipfs, print, isDaemon, getStdin }, trickle, shardSplitThreshold, cidVersion, rawLeaves, onlyHash, hash, wrapWithDirectory, pin, chunker, preload, fileImportConcurrency, blockWriteConcurrency, timeout, quieter, quiet, silent, progress, file, mtime, mtimeNsecs, recursive, hidden, preserveMode, preserveMtime, mode, cidBase }: {
    ctx: {
        ipfs: any;
        print: any;
        isDaemon: any;
        getStdin: any;
    };
    trickle: any;
    shardSplitThreshold: any;
    cidVersion: any;
    rawLeaves: any;
    onlyHash: any;
    hash: any;
    wrapWithDirectory: any;
    pin: any;
    chunker: any;
    preload: any;
    fileImportConcurrency: any;
    blockWriteConcurrency: any;
    timeout: any;
    quieter: any;
    quiet: any;
    silent: any;
    progress: any;
    file: any;
    mtime: any;
    mtimeNsecs: any;
    recursive: any;
    hidden: any;
    preserveMode: any;
    preserveMtime: any;
    mode: any;
    cidBase: any;
}): Promise<void>;
//# sourceMappingURL=add.d.ts.map