export const command: string;
export const describe: string;
export const builder: {
    parents: {
        alias: string;
        type: string;
        default: boolean;
        describe: string;
    };
    create: {
        alias: string;
        type: string;
        default: boolean;
        coerce: (value: any) => any;
        describe: string;
    };
    offset: {
        alias: string;
        type: string;
        describe: string;
    };
    length: {
        alias: string;
        type: string;
        describe: string;
    };
    truncate: {
        alias: string;
        type: string;
        default: boolean;
        coerce: (value: any) => any;
        describe: string;
    };
    'raw-leaves': {
        alias: string;
        type: string;
        default: boolean;
        coerce: (value: any) => any;
        describe: string;
    };
    'reduce-single-leaf-to-self': {
        type: string;
        default: boolean;
        coerce: (value: any) => any;
        describe: string;
    };
    flush: {
        alias: string;
        type: string;
        default: boolean;
        coerce: (value: any) => any;
        describe: string;
    };
    strategy: {
        alias: string;
        type: string;
        default: string;
    };
    'cid-version': {
        alias: string[];
        type: string;
        default: number;
        describe: string;
    };
    'hash-alg': {
        alias: string;
        type: string;
        default: string;
    };
    'shard-split-threshold': {
        type: string;
        default: number;
        describe: string;
    };
    mode: {
        type: string;
        coerce: (value: any) => number;
        describe: string;
    };
    mtime: {
        type: string;
        coerce: (value: any) => any;
        describe: string;
    };
    'mtime-nsecs': {
        type: string;
        coerce: (value: any) => any;
        describe: string;
    };
    timeout: {
        type: string;
        coerce: typeof import("parse-duration").default;
    };
};
export function handler({ ctx: { ipfs, getStdin }, path, offset, length, create, truncate, rawLeaves, reduceSingleLeafToSelf, cidVersion, hashAlg, parents, progress, strategy, flush, shardSplitThreshold, mode, mtime, mtimeNsecs, timeout }: {
    ctx: {
        ipfs: any;
        getStdin: any;
    };
    path: any;
    offset: any;
    length: any;
    create: any;
    truncate: any;
    rawLeaves: any;
    reduceSingleLeafToSelf: any;
    cidVersion: any;
    hashAlg: any;
    parents: any;
    progress: any;
    strategy: any;
    flush: any;
    shardSplitThreshold: any;
    mode: any;
    mtime: any;
    mtimeNsecs: any;
    timeout: any;
}): Promise<void>;
export function handler({ ctx: { ipfs, getStdin }, path, offset, length, create, truncate, rawLeaves, reduceSingleLeafToSelf, cidVersion, hashAlg, parents, progress, strategy, flush, shardSplitThreshold, mode, mtime, mtimeNsecs, timeout }: {
    ctx: {
        ipfs: any;
        getStdin: any;
    };
    path: any;
    offset: any;
    length: any;
    create: any;
    truncate: any;
    rawLeaves: any;
    reduceSingleLeafToSelf: any;
    cidVersion: any;
    hashAlg: any;
    parents: any;
    progress: any;
    strategy: any;
    flush: any;
    shardSplitThreshold: any;
    mode: any;
    mtime: any;
    mtimeNsecs: any;
    timeout: any;
}): Promise<void>;
//# sourceMappingURL=write.d.ts.map